Language:
============
		communication
		
Programming Languages:
=======================		
		communication with machine

		software -->set of programs

			
			python,c,c++,csharp,java,php......

		POP				       		 OOP
	B,BCPL,C,COBOL,PHOTON....			python,c++,csharp,java,php--oopl

						1)PERFORMANCE	INHERITANCE,POLYMORPHISAM
						2)SECURITY		ABSTRACTION,ENCAPSULATION
					
	JAVA		
			
			Platform independent
			Garbage collection
				oracle 				microsoft	
		java-->JDK					.net

Helloworld 						windows7   linux


lowercase 

Welcome.java
class		
			
		Identifiers
		
			a-z
			A-Z
			0-9
			$
			_
variables:
==========	static typed PL
		datatype varname=value;
			
			2 types
		PDT 		NPDT		  int age=32

	byte		1 byte		-128  127
	short		2 bytes		-32768 to 32767
	int			4			-2147483648 to 2147483647
	long		8			-2 power 63 to (2 power 63)-1
	
	float		4
	double		8
	
	char		2
	boolean		1 bit tru,false 
	
	
	local,global

instance and static :
=====================

1)syntax
		static  variables will have the keyword static
		if there is no static keyword ie instance
2)memory
	 static properties will get one time memory whenever the class loading into JVM
	 instance properties will get memory for every object creation 
				classname objname=new classname();

3)Access
		static properties can be accessed by using class name
		instance properties can be accessed by using obj name
		

4)When to use
		for common properties static ex:orgname,schoolname,collegename,countryname....etc
		foru unique properties instance ex:empid,contact,aadhar.....
methods:
========
		
		m1(a,b){
			int a=12;
			int b=13
			int result= a+b;
		}
		calling
		
		public static void main(String[] args) 
		
		//concrete method	
	accessmodifier instance/static  returntype methodname(parameters)
	{
	
	
	}
	//abstract method
	accessmodifier instance/static  returntype methodname(parameters);
	
Flow control :
==============
	
	
	
OOPS:
=====
Object Oriented Programming language

			Inehritance
			polymorphisam
			abstaction
			encapsulation
			
			
Inehritance:
============extends,implements :Code Reusability
		class Test{
		//200 methods
		
		}
		class Hello extends Test{
		
		
		
		}

		class -->class-->extends
		interface-->class-->implements
		interface --->interface -->extends


		1)single level
		2)multi level
		3)hirarchie level
		4)multiple level
		5)hybrid level

By default parent class for every java class is java.lang.Object
By default package available for every java file is java.lang

Abstraction:
		abstract class ,interface
		
methods

		method signature with body-->concrete/non-abstract/implemented methods
		method signature with out body-->abstract/un-implemented methods
		
		
		public void add(int a,int b)
		{
		....
		....
		...
		}
		
		public abstract void sub(int a,int b);//abstract method
		
	class:it is a collection of only concrete methods	.
	abstract class:it is a combination of both abstract and concrete methods.	0%-100%
	interface:it is a collection of only abstract  methods.		100%	

multiple inheritance
		MI Not supported by java through classes
		MI  supported by java through interfaces
		
		
		interface Test{       interface Hello{
		m1()				m1()
		
		...						....
		}					}
				class Child implementes Test,Hello
				{
				
				Child ch=new Child()
				ch.m1()
			
				}
				m1()
				{
				
				}
		
constructor

		it is a special which is used to create object 
	class Test
	{
	//classname objname=new constructor();
	Test obj=new Test();
	}



polymorphisam

	many forms 
	
	method overloading
			method name is same signature is different 
									 no of params
									 order of params
									 type params
	
	method overriding
	method name is same but implementation is differernt 
	
	class Parent{
	
	1000 methods
	}
	
	class Child extends Parent{
	999
	1
	
	}
	OOPS
	=====
	this,super,final,accessmodifiers,encapsulation
	
		
	this: it is used to represent current class properties(variable,method,object,constructor)
	
	super:it is used to represent parent class properties
	
	
	
	public 		-->every where
	private		-->only inside the class 
	protected	-->in side the package everywhere outside the package only in child 
	default		-->package level scope
	
	
	ENCAPSULATION
		
		
		
		class Employee
		{
		private int	eid ;
			ename
			esal
			....
		public setId(int eid){
		this.eid=eid
		}
		
		
		}
		Employee emp=new Employee();
		
	
	
	
	
	

	
			1)System defined error messages
			
			2)abnormal termination
			
	Exception handling	
			1)User friendly error messages
			2)normal termination
			
			Error
				compile time error			public Public
				runtime error(Exception)				invalid input 
					
									Throwable
									
							predefined 
							AE
							NFE
							NPE
							AIOE.....
							
			synchronous    Asynchronous				
							
							
							userdefined
							
							try
							catch
							
							try
							finally
							
							
							try 
							finally
							catch
							
							try 
							catch
							finally
							finally
							
							
							try
							SOP()
							catch
							
			throw and throws				
							
	
	String:java.lang
		group of chars 
	String,StringBuffer,StringBuilder	
			
			"cognizant"
	
	
	
	String ---imuttable
	
	StringBuffer(synchronized),StringBuilder(not-synchronized)--->Muttable
	
	
	
		public void m1()
		{													
		
		}
		public synchronized void m2()
		{
		
		}
		
				t1,t2,t3
	
	
	
	
	
	Collections
	
	multi threading
	
	java8
	
	
	jdbc



	
	
	clean org.jacoco:jacoco-maven-plugin:prepare-agent install
	
	
	SLF4J and Log4j are both logging libraries in Java, but they have different use cases and characteristics: 

SLF4J
Stands for Simple Logging Facade for Java, and it's a facade that abstracts various logging frameworks. This allows developers to: 
Write logging code easily 
Switch frameworks without changing code 
Enhance readability with parameters in log messages 
Decouple the logging API from the actual logging implementation 
Replace with any other logging framework in the future 

Log4j
An open-source Java-based logging utility framework that was very popular. It has: 
A dedicated API with its own format of writing code 
A complex format for changing to another framework 
Solid performance 
High configurability 
A large and active development community 
	
	
	
	
	
	
	
	
	

	
		
		
		
		
		
		
		
		
		
		
		
		
		






